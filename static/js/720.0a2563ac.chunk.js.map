{"version":3,"file":"static/js/720.0a2563ac.chunk.js","mappings":"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","sources":["pages/BikeRoute.jsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from \"react\";\nimport GMap from \"../component/gMap/GMap\";\nimport cityList from \"../constant/cityList\";\nimport useGetRoute from \"../hooks/useGetRoute\";\nimport PageContainer from \"../component/PageContainer\";\nimport Toolbar from \"../component/toolbar/Toolbar\";\nimport RouteSelectorToolbar from \"../component/custom/RouteSelectorToolbar\";\nimport SwitchableMainContentLayout from \"../component/SwitchableMainContentLayout\";\nimport RouteInfoListGroup from \"../component/custom/RouteInfoListGroup\";\nimport fitGMapBounds from \"../utils/fitGMapBounds\";\nimport useGetFilteredRouteInfo from \"../hooks/useGetFilteredRouteInfo\";\nimport SelectableRouteMarks from \"../component/gMap/SelectableRouteMarks\";\nimport useRWD from \"../hooks/useRWD\";\nimport screenEnum from \"../constant/screenEnum\";\nimport SubToolbar from \"../component/toolbar/SubToolbar\";\nimport styleParams from \"../constant/styleParams\";\nimport CollapsibleToolbarLayout from \"../component/toolbar/CollapsibleToolbarLayout\";\n// import PropTypes from \"prop-types\";\nfunction BikeRoute(props) {\n  const [city, setCity] = useState(cityList[0].value);\n  const [dirFilter, setDirFilter] = useState([]);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [searchKeyVal, setSearchKeyVal] = useState(\"\");\n  const [routeLen, setRouteLen] = useState(\"\");\n  const [selectedRouteId, setSelectedRouteId] = useState();\n  const [selectedRoute, setSelectedRoute] = useState([]);\n  const [map, setMap] = useState();\n  const [maps, setMaps] = useState();\n  const { getRoute, data, isLoading } = useGetRoute([]);\n  const refEle = useRef({ list: [] });\n  const { screen } = useRWD();\n\n  useEffect(() => {\n    getRoute(city, (val) => val, searchKey, routeLen);\n  }, [getRoute, city, searchKey, routeLen]);\n\n  const { filteredRouteInfos, routeStartStops } = useGetFilteredRouteInfo(\n    dirFilter,\n    data\n  );\n\n  useEffect(() => {\n    fitGMapBounds(map, maps, routeStartStops);\n  }, [routeStartStops, map, maps]);\n\n  useEffect(() => {\n    setSelectedRoute([]);\n    setSelectedRouteId();\n  }, [dirFilter, city, routeLen]);\n\n  const handleSelectRoute = useCallback((map, maps, geometry, id) => {\n    setSelectedRoute(geometry);\n    fitGMapBounds(map, maps, geometry);\n    setSelectedRouteId(id);\n  }, []);\n\n  const toolbarComponent = useCallback(\n    (render) => (\n      <RouteSelectorToolbar\n        city={city}\n        routeLen={routeLen}\n        searchKey={searchKeyVal}\n        onCityChange={setCity}\n        onRouteLenChange={setRouteLen}\n        onDireactChange={setDirFilter}\n        searchMarginLeft\n        onSearch={setSearchKey}\n        onSearchChange={setSearchKeyVal}\n        render={render}\n      />\n    ),\n    [city, routeLen, searchKeyVal]\n  );\n\n  const { screenGratherThanMd, offsetTop } = useMemo(() => {\n    const screenGratherThanMd = screen > screenEnum.md;\n    return {\n      screenGratherThanMd,\n      offsetTop: !screenGratherThanMd && styleParams.secondToolbarHeight,\n    };\n  }, [screen]);\n\n  return (\n    <PageContainer>\n      <CollapsibleToolbarLayout\n        toolbar={\n          <>\n            {\" \"}\n            <Toolbar>\n              {toolbarComponent((whole, selectors) =>\n                screenGratherThanMd ? whole : selectors\n              )}\n            </Toolbar>\n            {!screenGratherThanMd &&\n              toolbarComponent((whole, selectors, checkboxGroup, search) => (\n                <SubToolbar>\n                  {checkboxGroup} {search}\n                </SubToolbar>\n              ))}\n          </>\n        }\n        content={\n          <SwitchableMainContentLayout\n            switchMode={screen <= screenEnum.md}\n            leftContent={\n              <RouteInfoListGroup\n                refEle={refEle}\n                routInfos={filteredRouteInfos}\n                hideCardBtn\n                selectedRouteId={selectedRouteId}\n                onClickCard={(geometry, id) =>\n                  handleSelectRoute(map, maps, geometry, id)\n                }\n              />\n            }\n            rightContent={\n              <GMap\n                steps={selectedRoute}\n                onMount={(_map, _maps) => {\n                  setMap(_map);\n                  setMaps(_maps);\n                }}\n              >\n                {SelectableRouteMarks({\n                  selectedRoute: selectedRoute,\n                  allRouteStartStops: routeStartStops,\n                  onClickRouteMark: (id) => {\n                    handleSelectRoute(\n                      map,\n                      maps,\n                      filteredRouteInfos[id].Geometry,\n                      id\n                    );\n                    refEle.current.list[id].scrollIntoView({\n                      behavior: \"smooth\",\n                    });\n                  },\n                })}\n              </GMap>\n            }\n            loading={isLoading}\n          />\n        }\n        contentOffset={offsetTop}\n      />\n    </PageContainer>\n  );\n}\n\nBikeRoute.propTypes = {};\n\nexport default BikeRoute;\n"],"names":["props","useState","cityList","city","setCity","dirFilter","setDirFilter","searchKey","setSearchKey","searchKeyVal","setSearchKeyVal","routeLen","setRouteLen","selectedRouteId","setSelectedRouteId","selectedRoute","setSelectedRoute","map","setMap","maps","setMaps","useGetRoute","getRoute","data","isLoading","refEle","useRef","list","screen","useRWD","useEffect","val","useGetFilteredRouteInfo","filteredRouteInfos","routeStartStops","fitGMapBounds","handleSelectRoute","useCallback","geometry","id","toolbarComponent","render","onCityChange","onRouteLenChange","onDireactChange","searchMarginLeft","onSearch","onSearchChange","useMemo","screenGratherThanMd","screenEnum","offsetTop","styleParams","toolbar","whole","selectors","checkboxGroup","search","content","switchMode","leftContent","routInfos","hideCardBtn","onClickCard","rightContent","steps","onMount","_map","_maps","SelectableRouteMarks","allRouteStartStops","onClickRouteMark","Geometry","current","scrollIntoView","behavior","loading","contentOffset"],"sourceRoot":""}